stages:
  - bootstrap
  - lint
  - deprecations
  - testPreBuild
  - test
  - build
  - testPostBuild
  - merge-develop-in-release
  - release-to-new-tag
  - buildTag
  - deploy

variables:
  GIT_STRATEGY: pull
  npm_config_cache: .cache/npm-cache/
  COMPOSER_CACHE_DIR: .cache/composer/
  YARN_CACHE_FOLDER: .cache/yarn/

default:
  image: thecodingmachine/php:7.4-v4-cli-node14
  cache:
    key: "CI_COMMIT_REF_SLUG"
    paths:
      - .cache

.rules_default:
  rules:
    - if: '$CI_COMMIT_BRANCH == "develop" && $CI_COMMIT_MESSAGE !~ /^\[RELEASE\](.?)*/ && $CI_COMMIT_MESSAGE !~ /^\[TASK\] Set version (.?)*/'
    - if: '$CI_COMMIT_BRANCH=~ /^feature(.?)*/ && $CI_COMMIT_MESSAGE !~ /^\[RELEASE\](.?)*/ && $CI_COMMIT_MESSAGE !~ /^\[TASK\] Set version (.?)*/'
    - if: '$CI_COMMIT_BRANCH=~ /^issue(.?)*/ && $CI_COMMIT_MESSAGE !~ /^\[RELEASE\](.?)*/ && $CI_COMMIT_MESSAGE !~ /^\[TASK\] Set version (.?)*/'
    - if: '$CI_COMMIT_BRANCH=~ /^task(.?)*/ && $CI_COMMIT_MESSAGE !~ /^\[RELEASE\](.?)*/ && $CI_COMMIT_MESSAGE !~ /^\[TASK\] Set version (.?)*/'
    - if: '$CI_COMMIT_BRANCH=~ /^bugfix(.?)*/ && $CI_COMMIT_MESSAGE !~ /^\[RELEASE\](.?)*/ && $CI_COMMIT_MESSAGE !~ /^\[TASK\] Set version (.?)*/'
    - if: '$CI_COMMIT_BRANCH=~ /^breaking(.?)*/ && $CI_COMMIT_MESSAGE !~ /^\[RELEASE\](.?)*/ && $CI_COMMIT_MESSAGE !~ /^\[TASK\] Set version (.?)*/'

.rules_defaultandrelease:
  rules:
    - if: '$CI_COMMIT_BRANCH == "develop" && $CI_COMMIT_MESSAGE !~ /^\[RELEASE\](.?)*/ && $CI_COMMIT_MESSAGE !~ /^\[TASK\] Set version (.?)*/'
    - if: '$CI_COMMIT_BRANCH == "release" && $CI_COMMIT_MESSAGE !~ /^\[RELEASE\](.?)*/ && $CI_COMMIT_MESSAGE !~ /^\[TASK\] Set version (.?)*/'
    - if: '$CI_COMMIT_BRANCH=~ /^feature(.?)*/ && $CI_COMMIT_MESSAGE !~ /^\[RELEASE\](.?)*/ && $CI_COMMIT_MESSAGE !~ /^\[TASK\] Set version (.?)*/'
    - if: '$CI_COMMIT_BRANCH=~ /^issue(.?)*/ && $CI_COMMIT_MESSAGE !~ /^\[RELEASE\](.?)*/ && $CI_COMMIT_MESSAGE !~ /^\[TASK\] Set version (.?)*/'
    - if: '$CI_COMMIT_BRANCH=~ /^task(.?)*/ && $CI_COMMIT_MESSAGE !~ /^\[RELEASE\](.?)*/ && $CI_COMMIT_MESSAGE !~ /^\[TASK\] Set version (.?)*/'
    - if: '$CI_COMMIT_BRANCH=~ /^bugfix(.?)*/ && $CI_COMMIT_MESSAGE !~ /^\[RELEASE\](.?)*/ && $CI_COMMIT_MESSAGE !~ /^\[TASK\] Set version (.?)*/'
    - if: '$CI_COMMIT_BRANCH=~ /^breaking(.?)*/ && $CI_COMMIT_MESSAGE !~ /^\[RELEASE\](.?)*/ && $CI_COMMIT_MESSAGE !~ /^\[TASK\] Set version (.?)*/'

.rules_onlydevelop:
  rules:
    - if: '$CI_COMMIT_BRANCH == "develop" && $CI_COMMIT_MESSAGE !~ /^\[RELEASE\](.?)*/ && $CI_COMMIT_MESSAGE !~ /^\[TASK\] Set version (.?)*/'

.rules_onlyrelease:
  rules:
    - if: '$CI_COMMIT_BRANCH == "release" && $CI_COMMIT_MESSAGE !~ /^\[RELEASE\](.?)*/ && $CI_COMMIT_MESSAGE !~ /^\[TASK\] Set version (.?)*/'

.rules_onlyversiontag:
  rules:
    - if: '$CI_COMMIT_TAG =~ /^v\d+.\d+.\d+/'

.rules_onlyversiontagandslack:
  rules:
    - if: '$CI_COMMIT_TAG =~ /^v\d+.\d+.\d+/ && $SLACK_HOOK'

include:
  - '/.gitlab/005.bootstrap.composer.install.dev.yml'
  - '/.gitlab/006.bootstrap.npm.ci.yml'
  - '/.gitlab/010.test.lint.yml'
  - '/.gitlab/020.test.deprecations.yml'
  - '/.gitlab/040.test.prebuild.yml'
  - '/.gitlab/100.merge-develop-in-release.yml'
  - '/.gitlab/200.semanticRelease-to-new-tag.yml'
  - '/.gitlab/500.merge-release-with-develop.yml'
  - '/.gitlab/800.publishToGitlabRegistry.yml'
  - '/.gitlab/900.publishToSatis.yml'
  - '/.gitlab/950.slackNotice.yml'
